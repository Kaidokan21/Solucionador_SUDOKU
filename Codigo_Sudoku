#include <stdio.h>

int inserir_grelha();
int validar_grelha();
int resolver_celula(int linha, int coluna);
int validar(int linha, int coluna, int valor);

void print_grelha();

int original[9][9], grelha[9][9];

int main()
{
	if (! inserir_grelha()) {
		printf("Erro: incapaz de inserir grelha...\n");
		return 0;
	}

	printf("\nA validar puzzle... \n");
	if (! validar_grelha()) {
		printf("Invalido!\n");
		return 0;
	}

	printf("Valido!\n\nResolvendo Puzzle:\n");
	print_grelha();

	if (! resolver_celula(0, 0)) {
		printf("\nInfelizmente o seu puzzle e' impossivel de resolver...\n");
		return 0;
	}

	printf("\nPuzzle Solucionado:\n");
	print_grelha();
	return 0;
}

int inserir_grelha() 		// Pedir utilizador para inserir as linhas do puzzle
{
	int caractere, linha, coluna;
	linha = coluna = 0;

	printf("Inserir linhas, linha por linha. Utilize numeros para celulas conhecidas, zeros ou pontos para celulas desconhecidas.\n\nLinha 1: ");

	while (linha < 9) {
		caractere = getchar();

		if ('0' <= caractere && caractere <= '9' || caractere == '.') {	 // verifica se input é entre 0 e 9 ou um "."
			if (coluna > 8) { 
				printf("Erro: cada linha tem no maximo 9 celulas...\n");
				return 0;
			}

			if (caractere != '.') 	
				original[linha][coluna] = 
					grelha[linha][coluna] = caractere - '0'; 	// se não for "." atribui-se o valor '0' ao caractere

			coluna++;

		} else if (caractere == '\n') {
			coluna = 0;
			linha++;

			printf("Linha %i: ", linha + 1); // pedir pela próxima linha
		}
	}

	return 1;
}

int validar_grelha() 		// Verificar se puzzle de entrada é válido
{
	int i, j;

	for (i = 0; i < 9; i++)
		for (j = 0; j < 9; j++) // percorrer as células da grelha
			if (grelha[i][j])
				if (! validar(i, j, grelha[i][j])) // chamar função "validar" para verificar se o valor da célula atual pode ser usado
					return 0; 	// retornar 0 se puzzle for inválido

	return 1; 	// retornar 1 apenas se o valor é único ou 0
}

int resolver_celula(int linha, int coluna)		// Utilização do método Backtracking para resolver o puzzle
{
	int numero = 1;

	if (coluna == 9) {
		coluna = 0;
		linha++;
	}

	if (linha == 9)
		return 1; // se a linha for =) logo puzzle foi resolvido

	while (numero < 10) {
		if (validar(linha, coluna, numero)) {	// chama "validar" para verificar se o número atual pode ser posto na célula atual
			grelha[linha][coluna] = numero;

			if (resolver_celula(linha, coluna + 1))
				return 1;	// se "resolver_celula" retornar 1 então a função retorna 1 e declara que o puzzle foi resolvido.
		}

		grelha[linha][coluna] = 0;

		numero++;	//se o número não for valido ou "resolver_celula" não retornar 1 a função reseta a célula atual para 0 e incrementa o número.
	}

	return 0; // see o loop for concluído sem retornar 1, a função retornará 0 indicando que o puzzle é impossível
}

int validar(int linha, int coluna, int valor)		// Verifica se um determinado número ser colocado em determinada célula
{
	int i, j, l, c;

	if (original[linha][coluna] != 0)
		if (original[linha][coluna] != valor)
			return 0;

	for (i = 0; i < 9; i++) {
		if (i != coluna)
			if (grelha[linha][i] == valor)
				return 0;

		if (i != linha)
			if (grelha[i][coluna] == valor)
				return 0;
	}

	l = (linha / 3) * 3;
	c = (coluna / 3) * 3;
	for (i = l; i < l + 3; i++)
		for (j = c; j < c + 3; j++)
			if (i != linha || j != coluna)
				if (grelha[i][j] == valor)
					return 0;

	return 1;
}

void print_grelha()		// Imprime o puzzle de entrada e o resultado final
{
	int i, j;

	for (i = 0; i < 10; i++) {
		if (i % 3 == 0)
			printf("+-------+-------+-------+\n");

		if (i == 9)
			return;

		for (j = 0; j < 9; j++) {
			if (j % 3 == 0)
				printf("| ");

			grelha[i][j] != 0 ? printf("%d ", grelha[i][j]) : printf(". ");
		}

		printf("|\n");
	}
}
